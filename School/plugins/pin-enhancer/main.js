/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PinEnhancerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var PinEnhancerPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    // Map of a reference of a tab's header to their blockers.
    this.blockers = /* @__PURE__ */ new Map();
    // Map of a reference to a tab's status containers to their observers
    this.observers = /* @__PURE__ */ new Map();
  }
  async onload() {
    this.initialisePinnedTabs();
    this.updatePinObservers();
    this.addAltCloseCommands();
    this.registerEvent(
      this.app.workspace.on(
        "layout-change",
        this.updatePinObservers.bind(this)
      )
    );
  }
  /**
   * On initialisation, iterates through all leaves and adds blockers to
   * pinned tabs.
   */
  initialisePinnedTabs() {
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (leaf.getViewState().pinned && // @ts-expect-error - leaf.tabHeaderEl is private
      !this.blockers.has(leaf.tabHeaderEl)) {
        this.addBlockers(leaf.tabHeaderEl);
      }
    });
  }
  /**
   * Adds blockers to the tab to prevent closure.
   */
  addBlockers(tab) {
    const blockMiddleClick = (event) => {
      if (event.button !== 1)
        return;
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
      new import_obsidian.Notice("Cannot close pinned tab");
    };
    tab.addEventListener("auxclick", blockMiddleClick, true);
    this.blockers.set(tab, {
      middleClick: blockMiddleClick
    });
  }
  /**
   * Remove blockers from the tab.
   */
  removeBlockers(tab) {
    const listeners = this.blockers.get(tab);
    if (listeners) {
      tab.removeEventListener("auxclick", listeners.middleClick, true);
      this.blockers.delete(tab);
    }
  }
  /**
   * Initialies pin observers for all tabs.
   */
  updatePinObservers() {
    var _a;
    (_a = this.app.workspace.rootSplit) == null ? void 0 : _a.containerEl.querySelectorAll(".workspace-tab-header").forEach((tab) => {
      this.addPinObserver(tab);
    });
    this.observers.forEach((observer, statusContainer) => {
      if (statusContainer.isConnected)
        return;
      observer.disconnect();
      this.observers.delete(statusContainer);
    });
  }
  /**
   * Adds a mutation observer to the pin status container which notifies
   * us when a pin is added or removed.
   */
  addPinObserver(tab) {
    const statusContainer = tab.querySelector(
      ".workspace-tab-header-status-container"
    );
    if (!statusContainer)
      return;
    if (this.observers.has(statusContainer))
      return;
    if (tab.getCssPropertyValue("flex") === "0 0 auto" && // @ts-expect-error - tabHeaderEl is private
    this.app.workspace.getMostRecentLeaf().tabHeaderEl !== tab)
      return;
    const observer = new MutationObserver((muts) => {
      muts.forEach((mut) => {
        if (mut.type === "childList") {
          mut.addedNodes.forEach((_) => {
            this.addBlockers(tab);
          });
          mut.removedNodes.forEach((_) => {
            this.removeBlockers(tab);
          });
        }
      });
    });
    const config = { childList: true, subtree: false };
    observer.observe(statusContainer, config);
    this.observers.set(statusContainer, observer);
    return observer;
  }
  /**
   * Adds an alternative command for users to re-map "Ctrl-W" to close tabs.
   * This command will close tabs as normal, but will not close pinned tabs.
   */
  addAltCloseCommands() {
    this.addCommand({
      id: "alt-close-tab",
      name: "Close tab",
      callback: () => {
        var _a;
        const leaf = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.leaf;
        if (!leaf)
          return;
        if (leaf == null ? void 0 : leaf.getViewState().pinned) {
          new import_obsidian.Notice("Cannot close pinned tab");
        } else {
          leaf == null ? void 0 : leaf.detach();
        }
      }
    });
    this.addCommand({
      id: "alt-close-other-tabs",
      name: "Close all other tabs",
      callback: () => {
        this.app.workspace.iterateAllLeaves((leaf) => {
          if (leaf.getViewState().pinned)
            return;
          leaf.detach();
        });
      }
    });
  }
  onunload() {
    this.blockers.forEach((listeners, tab) => {
      tab == null ? void 0 : tab.removeEventListener("auxclick", listeners.middleClick, true);
    });
    this.blockers.clear();
    this.observers.forEach((observer) => {
      observer.disconnect();
    });
    this.observers.clear();
  }
};


/* nosourcemap */